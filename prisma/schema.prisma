// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Original/basic Next Auth Schemas (Account, User, Session, VerificationToken) from: https://authjs.dev/reference/adapter/prisma
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String?    @unique
  emailVerified   DateTime?
  username        String?    @unique
  image           String?
  role            UserRole   @default(USER)
  ambassadorOf    City?      @relation(fields: [cityId], references: [id]) // TODO: Should they be able to be ambassador to more than one city? Yes...
  cityId          String?
  accounts        Account[]
  sessions        Session[]
  events          Event[]    @relation("EventCreator")
  eventInvites    Event[]    @relation("EventInvites")
  eventsAttending Event[]    @relation("EventParticipants")
  waitList        Event[]    @relation("WaitList")
  comments        Comment[]
  feedback        Feedback[]
}

enum UserRole {
  USER
  ADMIN
  DEVELOPER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Country {
  id    String  @id @default(cuid())
  name  String  @unique
  state State[]
}

model State {
  id        String  @id @default(cuid())
  name      String  @unique
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  city      City[]
  venue     Venue[]
}

model City {
  id          String  @id @default(cuid())
  name        String
  state       State   @relation(fields: [stateId], references: [id])
  stateId     String
  senues      Venue[]
  ambassadors User[]

  @@index([name])
}

enum VenueType {
  indoor
  outdoor
}

enum LineType {
  pickleball
  tennis
  multisport
}

model Venue {
  id             String       @id @default(cuid())
  name           String       @unique
  address        String
  city           City         @relation(fields: [cityId], references: [id])
  cityId         String
  state          State        @relation(fields: [stateId], references: [id])
  stateId        String
  zipCode        Int
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id])
  neighborhoodId String
  latitude       Int
  longitude      Int
  website        String
  phone          Int
  lines          LineType
  hasNets        Boolean
  isLighted      Boolean
  venueType      VenueType
  numbCours      Int
  cost           Int
  notes          String       @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  approved       Boolean
  events         Event[]
}

model Neighborhood {
  id     String  @id @default(cuid())
  name   String
  venues Venue[]
}

enum EventFormat {
  ANY
  DOUBLES
  SINGLES
  DRILLS
}

enum EventGenger {
  ANY
  MALE
  FEMALE
}

enum EventWrongSkillLevel {
  WARN
  BLOCK
  HIDDEN
}

model Event {
  id              String               @id @default(cuid())
  venue           Venue                @relation(fields: [venueId], references: [id])
  venueId         String
  title           String
  creator         User                 @relation("EventCreator", fields: [creatorId], references: [id])
  creatorId       String
  cancelled       Boolean              @default(false)
  date            DateTime             @db.Date()
  startTime       DateTime             @db.Time()
  endTime         DateTime             @db.Time()
  skillMin        Decimal              @db.Decimal(2, 1)
  skillMax        Decimal              @db.Decimal(2, 1)
  wrongSkillLevel EventWrongSkillLevel
  format          EventFormat
  genger          EventGenger
  minPlayers      Int
  maxPlayers      Int
  inviteOnly      Boolean
  eventInvites    User[]               @relation("EventInvites")
  participants    User[]               @relation("EventParticipants")
  waitListEnabled Boolean
  waitList        User[]               @relation("WaitList")
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  comments        Comment[]
}

model Comment {
  id        String     @id @default(cuid())
  text      String
  createdAt DateTime   @default(now())
  event     Event      @relation(fields: [eventId], references: [id])
  eventId   String
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  feedback  Feedback[]

  // Allow comments on comments?
  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")
}

model Feedback {
  liked     Boolean
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}
